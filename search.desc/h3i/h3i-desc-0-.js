searchState.loadedDescShard("h3i", 0, "h3i - low-level HTTP/3 debug and testing\nThe ID for an HTTP/3 control stream type.\nThe ID for an HTTP/3 push stream type.\nThe ID for a QPACK decoder stream type.\nThe ID for a QPACK encoder stream type.\nActions are small operations such as sending HTTP/3 frames …\nThe main h3i client runner.\nConfiguration for the h3i client.\nHelpers for dealing with quiche stream events and HTTP/3 …\nStateful parsing of QUIC streams into HTTP/3 frames.\nA collection of interactive CLI prompts based on inquire.\nSupport for recording h3i Actions and replaying them.\nActions specific to HTTP/3 and QUIC\nAn action which the HTTP/3 client should take.\nSend a CONNECTION_CLOSE frame with the given …\nA DATA frame was received.\nThe stream was somehow finished, either by a RESET_STREAM …\nA HEADERS frame was received.\nOpen a new unidirectional stream.\nSend a RESET_STREAM frame with the given error code.\nSend a quiche::h3::frame::Frame over a stream.\nSend a HEADERS frame over a stream.\nSend a STOP_SENDING frame with the given error code.\nSend arbitrary bytes over a stream.\nA response event, received over a stream, which will …\nWait for some form of a response before firing the next …\nResponse that can terminate a wait period.\nWait for an event. See WaitType for the events.\nWait for a time before firing the next action\nConfigure the wait behavior for a connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience to convert between header-related data and a …\nRepresents different errors that can occur when sync_client…\nAn error during the QUIC handshake.\nAn error during HTTP/3 exchanges.\nSome other type of error.\nSummarizes events that occurred during a connection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResponsible for creating a quiche::Connection and managing …\nDenotes why the connection was closed.\nA summary of all frames received on a connection. There …\nMaximum length of any serialized element’s unstructured …\nA wrapper to help serialize a quiche::ConnectionError\nA wrapper to help serialize quiche::PathStats\nA wrapper to help serialize quiche::Stats\nAn aggregation of frames received over a connection, …\nFlatten all received frames into a single vector. The …\nDetails about why the connection closed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee all HEADERS received on a given stream.\nInsert a new <code>H3iFrame</code> into the stream map on a given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the stream map is empty, e.g., no frames were …\nThe error generated locally, if any.\nIf the connection didn’t see an error, either one from …\nStatistics about all paths of the connection.\nThe error sent from the peer, if any.\nCheck if a provided <code>H3iFrame</code> was received, regardless of …\nCheck if a provided <code>H3iFrame</code> was received over a specified …\nL4 statistics received from the connection.\nGet all frames on a given <code>stream_id</code>.\nIf the connection timed out.\nConnect to a server and execute provided actions.\nGenerate a new pair of Source Connection ID and reset …\nMakes a buffered writer for a qlog.\nServer details and QUIC connection properties.\nSet a specific IP address to connect to, rather than use …\nReturns the argument unchanged.\nA string representing the host and port to connect to …\nThe QUIC idle timeout value in milliseconds.\nCalls <code>U::from(self)</code>.\nFlow control limit for the connection in bytes\nFlow control limit for locally-initiated bidirectional …\nFlow control limit for remotely-initiated bidirectional …\nFlow control limit for unidirectional streams in bytes.\nReceiver window limit for a stream in bytes.\nMaximum count for concurrent remotely-initiated …\n“Maximum count for concurrent remotely-initiated …\nReceiver window limit for the connection in bytes.\nConstruct a new config object with default values.\nIf the SNI should be omitted during the TLS handshake.\nThe source port to use when connecting to a server.\nWhether to verify the server certificate.\nAn HTTP/3 HEADERS frame with decoded headers and a …\nAn internal representation of a QUIC or HTTP/3 frame. This …\nA wrapper around an EnrichedHeaders struct.\nA wrapper around a quiche HTTP/3 frame.\nA <code>RESET_STREAM</code> frame.\nA wrapper around a ResetStream struct\nA wrapper to help serialize an quiche HTTP header.\nA wrapper to help serialize a quiche HTTP/3 frame.\nThe error code sent from the peer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the array of headers in this frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetches the value of the <code>:status</code> pseudo-header.\nThe stream ID over which the RESET_STREAM frame was sent.\nTry to convert this <code>H3iFrame</code> to an EnrichedHeaders.\nRepresents different frame parsing outcomes.\nA frame has been successfully parsed. <code>fin</code> denotes if the …\nThe reason that frame parsing was interrupted.\nA frame is in the middle of being parsed, but either a FIN …\nThe frame was unable to be parsed at the current moment. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA collection of interactive CLI prompts for HTTP/3 based …\nContains the error value\nAn error indicating that the provided buffer is not big …\nContains the success value\nA tuple of stream ID and quiche HTTP/3 frame.\nThe main prompter interface and state management.\nA specialized <code>Result</code> type for prompt operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart the prompt loop.\nConstruct a prompter with the provided <code>config</code>.\nA collection of Actions.\nA qlog H3FrameCreated event, with ExData.\nA qlog event representation using either the official RFC …\nA collection of QlogEvents.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")